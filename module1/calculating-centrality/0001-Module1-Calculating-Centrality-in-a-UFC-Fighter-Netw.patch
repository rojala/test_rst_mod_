From 13b317bb8fccc574c9ad21385fdc0033334340cc Mon Sep 17 00:00:00 2001
From: rojala <rami.ojala@iki.fi>
Date: Fri, 17 Oct 2025 11:30:13 +0000
Subject: [PATCH] Module1: Calculating Centrality in a UFC Fighter Network

3. Challenging Exercise
  Add new fighters and fights to the network.

  Run using additional parameters to add fights
  and fighters (multiple parameters allowed).

  cargo run -- --add-fighter foo
    --add-fight "foo:Khabib Nurmagomedov"
    --add-fight "foo:Conor McGregor"
---
 module1/calculating-centrality/Cargo.toml  |   1 +
 module1/calculating-centrality/Makefile    |   3 +
 module1/calculating-centrality/Readme.md   |  66 ++++++-
 module1/calculating-centrality/src/main.rs | 190 +++++++++++++++++----
 4 files changed, 225 insertions(+), 35 deletions(-)

diff --git a/module1/calculating-centrality/Cargo.toml b/module1/calculating-centrality/Cargo.toml
index 368c10f..1c71ad7 100644
--- a/module1/calculating-centrality/Cargo.toml
+++ b/module1/calculating-centrality/Cargo.toml
@@ -5,3 +5,4 @@ edition = "2024"
 
 [dependencies]
 petgraph = "0.6"
+clap = { version = "4.4", features = ["derive"] }
diff --git a/module1/calculating-centrality/Makefile b/module1/calculating-centrality/Makefile
index 09f5656..639a5bb 100644
--- a/module1/calculating-centrality/Makefile
+++ b/module1/calculating-centrality/Makefile
@@ -11,3 +11,6 @@ run:
 	cargo run 
 
 all: format lint test run
+
+params:
+	 cargo run -- --add-fighter foo --add-fight "foo:Khabib Nurmagomedov" --add-fight "foo:Conor McGregor"
diff --git a/module1/calculating-centrality/Readme.md b/module1/calculating-centrality/Readme.md
index 0a0447e..5b45970 100644
--- a/module1/calculating-centrality/Readme.md
+++ b/module1/calculating-centrality/Readme.md
@@ -78,6 +78,70 @@ In this lab, you'll learn how to use the petgraph crate in Rust to create a grap
 
 1. How would you modify the program to also calculate and display the betweenness centrality of each fighter?
 
+Added run cargo run
+
 2. How could you adapt this code to represent a different kind of network, such as a social network or transportation network?
 
-3. Can you add functionality to add new fighters and fights to the network?
\ No newline at end of file
+    Adapting your UFC fighter graph code to represent a **different kind of network**‚Äîlike a **social network** or a **transportation network**‚Äîis quite straightforward with `petgraph`. The core idea is to change the **meaning of nodes and edges** while keeping the graph structure intact.
+
+    ### üßë‚Äçü§ù‚Äçüßë **Social Network**
+
+    **Nodes**: People  
+    **Edges**: Friendships, follows, messages, etc.
+
+    #### Changes:
+    - Rename `Fighter` to `Person`
+    - Edges could be **weighted** by interaction frequency or strength of relationship
+    - Use `UnGraph` for mutual friendships or `DiGraph` for directed relationships (e.g., follows)
+
+    ```rust
+    #[derive(Debug)]
+    struct Person {
+        name: String,
+        age: u32,
+        location: String,
+    }
+    ```
+
+    ```rust
+    graph.add_edge(nodes[a], nodes[b], 0.75); // 0.75 = strength of friendship
+    ```
+
+    Then calculate centrality to find **influential people** or **connectors** in the network.
+
+    ### üöâ **Transportation Network**
+
+    **Nodes**: Cities or stations  
+    **Edges**: Routes between them
+
+    #### Changes:
+    - Rename `Fighter` to `Station` or `City`
+    - Edge weights could represent **distance**, **travel time**, or **cost**
+    - Use `UnGraph` for bidirectional routes or `DiGraph` for one-way routes
+
+    ```rust
+    #[derive(Debug)]
+    struct City {
+        name: String,
+        population: u64,
+    }
+    ```
+
+    ```rust
+    graph.add_edge(nodes[a], nodes[b], 120.0); // 120.0 = kilometers
+    ```
+
+    Use centrality to identify **hub cities** or **critical transit points**.
+
+    ### üß† Centrality Metrics in Other Networks
+
+    - **Closeness Centrality**: Who can reach others fastest (e.g., influencers, central stations)
+    - **Betweenness Centrality**: Who acts as a bridge (e.g., connectors in social networks, transfer hubs in transit)
+    - **Degree Centrality**: Who has the most connections (e.g., popular users, busy stations)
+
+3. Can you add functionality to add new fighters and fights to the network?
+    
+    Run using additional parameters to add fights and fighters (multiple parameters allowed).
+    ```bash
+    cargo run -- --add-fighter foo --add-fight "foo:Khabib Nurmagomedov" --add-fight "foo:Conor McGregor"
+    ```
\ No newline at end of file
diff --git a/module1/calculating-centrality/src/main.rs b/module1/calculating-centrality/src/main.rs
index 572c9a4..d468d1d 100644
--- a/module1/calculating-centrality/src/main.rs
+++ b/module1/calculating-centrality/src/main.rs
@@ -1,7 +1,25 @@
-use petgraph::Direction;
 use petgraph::graph::{NodeIndex, UnGraph};
 use std::fmt;
 
+// 1. Calculate and display the betweenness centrality for each fighter in the graph.
+use std::collections::HashMap;
+use petgraph::algo::dijkstra;
+
+// 3. Add functionality to add new fighters and fights to the network.
+use clap::Parser;
+#[derive(Parser)]
+#[command(name = "UFC Graph")]
+#[command(about = "Manage UFC fighter network", long_about = None)]
+struct Cli {
+    /// Add one or more fighters
+    #[arg(long = "add-fighter")]
+    fighters: Vec<String>,
+
+    /// Add one or more fights in the format "Fighter1:Fighter2"
+    #[arg(long = "add-fight")]
+    fights: Vec<String>,
+}
+
 #[derive(Debug)]
 struct Fighter {
     name: String,
@@ -27,56 +45,160 @@ impl fmt::Display for Fighter {
     }
 }
 
+/*
 fn add_edge(graph: &mut UnGraph<&Fighter, f32>, nodes: &[NodeIndex], a: usize, b: usize) {
     graph.add_edge(nodes[a], nodes[b], 1.0);
 }
+*/
+
+// 1. Calculate and display the betweenness centrality for each fighter in the graph.
+fn calculate_betweenness(graph: &UnGraph<Fighter, f32>, nodes: &[NodeIndex]) -> HashMap<NodeIndex, f32> {
+    let mut centrality = HashMap::new();
+
+    for &source in nodes {
+        for &target in nodes {
+            if source != target {
+                let paths = dijkstra(graph, source, Some(target), |_| 1.0);
+                if let Some(&distance) = paths.get(&target) {
+                    for (&node, &dist) in &paths {
+                        if node != source && node != target && dist < distance {
+                            *centrality.entry(node).or_insert(0.0) += 1.0;
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    let total_pairs = ((nodes.len() - 1) * (nodes.len() - 2)) as f32;
+    for value in centrality.values_mut() {
+        *value /= total_pairs;
+    }
+
+    centrality
+}
+
+
+// 3. Add functionality to add new fighters and fights to the network.
+fn find_node_index(graph: &UnGraph<Fighter, f32>, name: &str) -> Option<NodeIndex> {
+    graph.node_indices().find(|&i| graph[i].name == name)
+}
 
 fn main() {
-    let mut graph = UnGraph::new_undirected();
-
-    let fighters = [
-        Fighter::new("Dustin Poirier"),
-        Fighter::new("Khabib Nurmagomedov"),
-        Fighter::new("Jose Aldo"),
-        Fighter::new("Conor McGregor"),
-        Fighter::new("Nate Diaz"),
+    //3. Add functionality to add new fighters and fights to the network.
+    let cli = Cli::parse();
+
+    let mut fighter_nodes: Vec<NodeIndex> = Vec::new();
+    let mut graph = UnGraph::<Fighter, f32>::new_undirected();
+
+    let initial_fighters = [
+        "Dustin Poirier",
+        "Khabib Nurmagomedov",
+        "Jose Aldo",
+        "Conor McGregor",
+        "Nate Diaz",
+    ];
+
+
+    for name in initial_fighters {
+        let node = graph.add_node(Fighter::new(name));
+        fighter_nodes.push(node);
+    }
+
+    let initial_fights = [
+        ("Dustin Poirier", "Khabib Nurmagomedov"),
+        ("Khabib Nurmagomedov", "Conor McGregor"),
+        ("Conor McGregor", "Dustin Poirier"),
+        ("Conor McGregor", "Jose Aldo"),
+        ("Conor McGregor", "Nate Diaz"),
+        ("Dustin Poirier", "Nate Diaz"),
+        ("Jose Aldo", "Nate Diaz"),
     ];
 
-    let fighter_nodes: Vec<NodeIndex> = fighters
-        .iter()
-        .map(|fighter| graph.add_node(fighter))
-        .collect();
-
-    add_edge(&mut graph, &fighter_nodes, 0, 1); // Dustin Poirier vs. Khabib Nurmagomedov
-    add_edge(&mut graph, &fighter_nodes, 1, 3); // Khabib Nurmagomedov vs. Conor McGregor
-    add_edge(&mut graph, &fighter_nodes, 3, 0); // Conor McGregor vs. Dustin Poirier
-    add_edge(&mut graph, &fighter_nodes, 3, 2); // Conor McGregor vs. Jose Aldo
-    add_edge(&mut graph, &fighter_nodes, 3, 4); // Conor McGregor vs. Nate Diaz
-    add_edge(&mut graph, &fighter_nodes, 0, 4); // Dustin Poirier vs. Nate Diaz
-    add_edge(&mut graph, &fighter_nodes, 2, 4); // Jose Aldo vs. Nate Diaz
-
-    for (i, &node) in fighter_nodes.iter().enumerate() {
-        let name = &fighters[i].name;
-        let degree = graph.edges_directed(node, Direction::Outgoing).count() as f32;
-        let closeness = 1.0 / degree;
-        println!("The closeness centrality of {} is {:.2}", name, closeness);
-
-        // Explanation
-        match name.as_str() {
+    for (a, b) in initial_fights {
+        if let (Some(na), Some(nb)) = (find_node_index(&graph, a), find_node_index(&graph, b)) {
+            graph.add_edge(na, nb, 1.0);
+        }
+    }
+
+    // 3. Add functionality to add new fighters and fights to the network.
+    
+    for name in &cli.fighters {
+        if find_node_index(&graph, name).is_none() {
+            let node = graph.add_node(Fighter::new(name));
+            fighter_nodes.push(node);
+            println!("Added fighter '{}'.", name);
+        } else {
+            println!("Fighter '{}' already exists.", name);
+        }
+    }
+
+    for fight in &cli.fights {
+        let parts: Vec<&str> = fight.split(':').collect();
+        if parts.len() == 2 {
+            let fighter1 = parts[0];
+            let fighter2 = parts[1];
+            let n1 = find_node_index(&graph, fighter1);
+            let n2 = find_node_index(&graph, fighter2);
+
+            match (n1, n2) {
+                (Some(a), Some(b)) => {
+                    graph.add_edge(a, b, 1.0);
+                    println!("Added fight between '{}' and '{}'.", fighter1, fighter2);
+                }
+                _ => println!("One or both fighters not found: '{}', '{}'", fighter1, fighter2),
+            }
+        } else {
+            println!("Invalid fight format: '{}'. Use 'Fighter1:Fighter2'", fight);
+        }
+    }
+
+    let betweenness = calculate_betweenness(&graph, &fighter_nodes);
+
+    println!("-----------------");
+
+    println!("All fighters in the network:");
+    for node in graph.node_indices() {
+        let fighter = &graph[node];
+        println!("- {}", fighter.name);
+    }
+    println!("-----------------");
+
+    println!("\nAll fights in the network:");
+    for edge in graph.edge_indices() {
+        let (a, b) = graph.edge_endpoints(edge).unwrap();
+        println!("{} vs. {}", graph[a].name, graph[b].name);
+    }
+    println!("-----------------");
+
+    for node in graph.node_indices() {
+        let fighter = &graph[node];
+        let degree = graph.neighbors(node).count() as f32;
+        let closeness = if degree > 0.0 { 1.0 / degree } else { 0.0 };
+        let between = betweenness.get(&node).cloned().unwrap_or(0.0);
+
+        println!("The closeness centrality of {} is {:.2}", fighter.name, closeness);
+        println!("  Betweenness Centrality: {:.2}.", between);
+
+        match fighter.name.as_str() {
             "Conor McGregor" => println!(
                 "{} has the lowest centrality because he has fought with all other fighters in the network. In this context, a lower centrality value means a higher number of fights.",
-                name
+                fighter.name
             ),
             "Dustin Poirier" | "Nate Diaz" => println!(
                 "{} has a centrality of {:.2}, implying they had less fights compared to Conor McGregor but more than Khabib Nurmagomedov and Jose Aldo.",
-                name, closeness
+                fighter.name, closeness
             ),
             "Khabib Nurmagomedov" | "Jose Aldo" => println!(
                 "{} has the highest centrality of {:.2} as they have fought with the least number of fighters.",
-                name, closeness
+                fighter.name, closeness
+            ),
+            _ => println!(
+                "{} has a centrality of {:.2}.",
+                fighter.name, closeness
             ),
-            _ => {}
         }
+
         println!("-----------------");
     }
 }
-- 
2.50.1

